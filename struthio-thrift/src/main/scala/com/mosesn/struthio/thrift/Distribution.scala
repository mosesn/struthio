/**
 * generated by Scrooge 3.1.1
 */
package com.mosesn.struthio.thrift

import com.twitter.scrooge.{ThriftException, ThriftStruct, ThriftStructCodec3}
import org.apache.thrift.protocol._
import java.nio.ByteBuffer
import com.twitter.finagle.SourcedException
import scala.collection.mutable
import scala.collection.{Map, Set}


object Distribution extends ThriftStructCodec3[Distribution] {
  val Struct = new TStruct("distribution")
  val BucketsField = new TField("buckets", TType.LIST, 1)
  val CountField = new TField("count", TType.I64, 2)
  val SumField = new TField("sum", TType.I64, 3)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Distribution) {
  }

  override def encode(_item: Distribution, _oproto: TProtocol) { _item.write(_oproto) }
  override def decode(_iprot: TProtocol) = Immutable.decode(_iprot)

  def apply(_iprot: TProtocol): Distribution = decode(_iprot)

  def apply(
    buckets: Seq[Long] = Seq[Long](),
    count: Long,
    sum: Long
  ): Distribution = new Immutable(
    buckets,
    count,
    sum
  )

  def unapply(_item: Distribution): Option[Product3[Seq[Long], Long, Long]] = Some(_item)

  object Immutable extends ThriftStructCodec3[Distribution] {
    override def encode(_item: Distribution, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol) = {
      var buckets: Seq[Long] = Seq[Long]()
      var _got_buckets = false
      var count: Long = 0L
      var _got_count = false
      var sum: Long = 0L
      var _got_sum = false
      var _done = false
      _iprot.readStructBegin()
      while (!_done) {
        val _field = _iprot.readFieldBegin()
        if (_field.`type` == TType.STOP) {
          _done = true
        } else {
          _field.id match {
            case 1 => { /* buckets */
              _field.`type` match {
                case TType.LIST => {
                  buckets = {
                    val _list = _iprot.readListBegin()
                    val _rv = new mutable.ArrayBuffer[Long](_list.size)
                    var _i = 0
                    while (_i < _list.size) {
                      _rv += {
                        _iprot.readI64()
                      }
                      _i += 1
                    }
                    _iprot.readListEnd()
                    _rv
                  }
                  _got_buckets = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 2 => { /* count */
              _field.`type` match {
                case TType.I64 => {
                  count = {
                    _iprot.readI64()
                  }
                  _got_count = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case 3 => { /* sum */
              _field.`type` match {
                case TType.I64 => {
                  sum = {
                    _iprot.readI64()
                  }
                  _got_sum = true
                }
                case _ => TProtocolUtil.skip(_iprot, _field.`type`)
              }
            }
            case _ => TProtocolUtil.skip(_iprot, _field.`type`)
          }
          _iprot.readFieldEnd()
        }
      }
      _iprot.readStructEnd()
      new Immutable(
        buckets,
        count,
        sum
      )
    }
  }

  /**
   * The default read-only implementation of Distribution.  You typically should not need to
   * directly reference this class; instead, use the Distribution.apply method to construct
   * new instances.
   */
  class Immutable(
    val buckets: Seq[Long] = Seq[Long](),
    val count: Long,
    val sum: Long
  ) extends Distribution

  /**
   * This Proxy trait allows you to extend the Distribution trait with additional state or
   * behavior and implement the read-only methods from Distribution using an underlying
   * instance.
   */
  trait Proxy extends Distribution {
    protected def _underlying_distribution: Distribution
    def buckets: Seq[Long] = _underlying_distribution.buckets
    def count: Long = _underlying_distribution.count
    def sum: Long = _underlying_distribution.sum
  }
}

trait Distribution extends ThriftStruct
  with Product3[Seq[Long], Long, Long]
  with java.io.Serializable
{
  import Distribution._

  def buckets: Seq[Long]
  def count: Long
  def sum: Long

  def _1 = buckets
  def _2 = count
  def _3 = sum

  override def write(_oprot: TProtocol) {
    Distribution.validate(this)
    _oprot.writeStructBegin(Struct)
    if (true) {
      val buckets_item = buckets
      _oprot.writeFieldBegin(BucketsField)
      _oprot.writeListBegin(new TList(TType.I64, buckets_item.size))
      buckets_item.foreach { buckets_item_element =>
        _oprot.writeI64(buckets_item_element)
      }
      _oprot.writeListEnd()
      _oprot.writeFieldEnd()
    }
    if (true) {
      val count_item = count
      _oprot.writeFieldBegin(CountField)
      _oprot.writeI64(count_item)
      _oprot.writeFieldEnd()
    }
    if (true) {
      val sum_item = sum
      _oprot.writeFieldBegin(SumField)
      _oprot.writeI64(sum_item)
      _oprot.writeFieldEnd()
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    buckets: Seq[Long] = this.buckets, 
    count: Long = this.count, 
    sum: Long = this.sum
  ): Distribution = new Immutable(
    buckets, 
    count, 
    sum
  )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Distribution]

  override def equals(other: Any): Boolean = runtime.ScalaRunTime._equals(this, other)

  override def hashCode: Int = runtime.ScalaRunTime._hashCode(this)

  override def toString: String = runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => buckets
    case 1 => count
    case 2 => sum
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Distribution"
}